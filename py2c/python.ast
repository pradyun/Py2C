#-------------------------------------------------------------------------------
# Py2C - A Python to C++ compiler
# Copyright (C) 2014 Pradyun S. Gedam
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------


################################################################################
# From this file, the PyAST nodes is dynamically generated.
#
# This file based on Python's ASDL definitions, modified for ease of parsing,
# readability and ease of editting for adding C nodes
################################################################################

#-------------------------------------------------------------------------------
# Base nodes
#   Declared beforehand as is used later on, in the definitions.
#-------------------------------------------------------------------------------
PyAST(AST): []
mod(PyAST): [int lineno]
stmt(PyAST): [int lineno]
expr(PyAST): [int lineno]
expr_context(PyAST): []
slice(PyAST): []
boolop(PyAST): []
operator(PyAST): []
unaryop(PyAST): []
cmpop(PyAST): []

#-------------------------------------------------------------------------------
# Helpers
#-------------------------------------------------------------------------------
arg(PyAST): [identifier arg, expr? annotation]
comprehension(PyAST): [expr target, expr iter, expr* ifs]

arguments(PyAST): [
    arg* args,
    identifier? vararg,
    expr? varargannotation,
    arg* kwonlyargs,
    identifier? kwarg,
    expr? kwargannotation,
    expr* defaults,
    expr* kw_defaults
]

keyword(PyAST): [identifier arg, expr value]
alias(PyAST): [identifier name, identifier? asname]
withitem(PyAST): [expr context_expr, expr? optional_vars]

ExceptHandler(PyAST): [expr? type, identifier? name, stmt* body]

#-------------------------------------------------------------------------------
# Module
#-------------------------------------------------------------------------------
Module(mod): [stmt* body]

#-------------------------------------------------------------------------------
# Statements
#-------------------------------------------------------------------------------
FunctionDef(stmt): [
    identifier name,
    arguments args,
    stmt* body,
    expr* decorator_list,
    expr? returns
]

ClassDef(stmt): [
    identifier name,
    expr* bases,
    keyword* keywords,
    expr? starargs,
    expr? kwargs,
    stmt* body,
    expr* decorator_list
]

Return(stmt): [expr? value]

Delete(stmt): [expr* targets]
Assign(stmt): [expr* targets, expr value]
AugAssign(stmt): [expr target, operator op, expr value]

# 'else' is a keyword in Python
For(stmt): [expr target, expr iter, stmt* body, stmt* orelse]
While(stmt): [expr test, stmt* body, stmt* orelse]
If(stmt): [expr test, stmt* body, stmt* orelse]
With(stmt): [withitem* items, stmt* body]

Raise(stmt): [expr? exc, expr? cause]
Try(stmt): [stmt* body, ExceptHandler* handlers, stmt* orelse, stmt* finalbody]
Assert(stmt): [expr test, expr? msg]

Import(stmt): [alias* names]
ImportFrom(stmt): [identifier? module, alias* names, int? level]

Global(stmt): [identifier* names]
Nonlocal(stmt): [identifier* names]
Expr(stmt): [expr value]

Pass(stmt): []
Break(stmt): []
Continue(stmt): []


#-------------------------------------------------------------------------------
# Expressions
#-------------------------------------------------------------------------------
BoolOp(expr): [boolop op, expr* values]
BinOp(expr): [expr left, operator op, expr right]
UnaryOp(expr): [unaryop op, expr operand]
Lambda(expr): [arguments args, expr body]
IfExp(expr): [expr test, expr body, expr orelse]
Dict(expr): [expr* keys, expr* values]
Set(expr): [expr* elts]
ListComp(expr): [expr elt, comprehension* generators]
SetComp(expr): [expr elt, comprehension* generators]
DictComp(expr): [expr key, expr value, comprehension* generators]
GeneratorExp(expr): [expr elt, comprehension* generators]
Yield(expr): [expr? value]
YieldFrom(expr): [expr value]
Compare(expr): [expr left, cmpop* ops, expr* comparators]
Call(expr): [expr func, expr* args, keyword* keywords, expr? starargs, expr? kwargs]
Attribute(expr): [expr value, identifier attr, expr_context ctx]
Subscript(expr): [expr value, slice slice, expr_context ctx]
Starred(expr): [expr value, expr_context ctx]
Name(expr): [identifier id, expr_context ctx]
List(expr): [expr* elts, expr_context ctx]
Tuple(expr): [expr* elts, expr_context ctx]
Ellipsis(expr): []

# Literals with type-protection
literal(expr): []
Str(literal): [str s]
Bytes(literal): [bytes s]
Bool(literal): [bool b]
num(literal): []
Int(num): [int n]
Float(num): [float n]
Complex(num): [complex n]

#-------------------------------------------------------------------------------
# Expression context
#-------------------------------------------------------------------------------
# Load(expr_context): []
# Store(expr_context): []
# Del(expr_context): []
# AugLoad(expr_context): []
# AugStore(expr_context): []
# Param(expr_context): []

#-------------------------------------------------------------------------------
# Slices
#-------------------------------------------------------------------------------
Slice(slice): [expr? lower, expr? upper, expr? step]
ExtSlice(slice): [slice* dims]
Index(slice): [expr value]

#-------------------------------------------------------------------------------
# Boolean operators
#-------------------------------------------------------------------------------
And(boolop): []
Or(boolop): []

#-------------------------------------------------------------------------------
# Arithematic operators
#-------------------------------------------------------------------------------
Add(operator): []
Sub(operator): []
Mult(operator): []
Div(operator): []
Mod(operator): []
Pow(operator): []
LShift(operator): []
RShift(operator): []
BitOr(operator): []
BitXor(operator): []
BitAnd(operator): []
FloorDiv(operator): []

#-------------------------------------------------------------------------------
# Bit-wise operators
#-------------------------------------------------------------------------------
Invert(unaryop): []
Not(unaryop): []
UAdd(unaryop): []
USub(unaryop): []

#-------------------------------------------------------------------------------
# Comparision operators
#-------------------------------------------------------------------------------
Eq(cmpop): []
NotEq(cmpop): []
Lt(cmpop): []
LtE(cmpop): []
Gt(cmpop): []
GtE(cmpop): []
Is(cmpop): []
IsNot(cmpop): []
In(cmpop): []
NotIn(cmpop): []
